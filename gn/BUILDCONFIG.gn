import("//build_overrides/clspv.gni")

import("//gn/toolchain/compiler.gni")

# All targets will get this list of configs by default.
# Targets can opt out of a config by removing it from their local configs list.
# If you're adding global flags and don't need targets to be able to opt out,
# add the flags to compiler_defaults, not to a new config.
shared_binary_target_configs = [
  "//gn/build:compiler_defaults",
  "//gn/build:llvm_code",
  "//gn/build:no_exceptions",
  "//gn/build:no_rtti",
  "//gn/build:thin_archive",
  "//gn/build:warn_covered_switch_default",
]

# Apply that default list to the binary target types.
set_defaults("executable") {
  configs = shared_binary_target_configs
}
set_defaults("loadable_module") {
  configs = shared_binary_target_configs
}
set_defaults("static_library") {
  configs = shared_binary_target_configs
}
set_defaults("shared_library") {
  configs = shared_binary_target_configs +
            [ "//$clspv_llvm_dir/llvm/utils/gn/build:zdefs" ]
}
set_defaults("source_set") {
  configs = shared_binary_target_configs
}

if (host_os == "win") {
  assert(true, "linux is only supported as host_os for now")
  #host_toolchain = "//${llvm_build_root}build/toolchain:win"
} else {
  host_toolchain = "//gn/toolchain:host"
}

android_aarch64_toolchain = "//gn/toolchain:android_aarch64"
android_arm_toolchain = "//gn/toolchain:android_arm"

if (android_ndk_path != "") {
  assert(target_cpu == "arm" || target_cpu == "arm64",
         "target_cpu must be either arm or arm64 for android")
  target_os = "android"
  if (target_cpu == "arm") {
    set_default_toolchain(android_arm_toolchain)
  } else {
    set_default_toolchain(android_aarch64_toolchain)
  }
} else {
  set_default_toolchain(host_toolchain)
}

if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  target_cpu = host_cpu
}

if (current_os == "") {
  current_os = target_os
}

if (current_cpu == "") {
  current_cpu = target_cpu
}

# BUILD FLAGS
declare_args() {
  # Build for debugging. Equivalent to is_optimized=false symbol_level=2.
  is_debug = false
}

# args that depend on other args must live in a later declare_args() block.
declare_args() {
  if (is_debug) {
    # Debug info symbol level. 0: No symbols; 1: Line numbers; 2: Full symbols.
    symbol_level = 2
  } else {
    # Debug info symbol level. 0: No symbols; 1: Line numbers; 2: Full symbols.
    symbol_level = 0
  }
}
